# Ensure Samples can find library
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})
LINK_DIRECTORIES(${PROJECT_BINARY_DIR})
REMOVE_DEFINITIONS(-DLIBRARY_EXPORTS)

FIND_PACKAGE(FREEGLUT QUIET)
FIND_PACKAGE(CUDA QUIET)
FIND_PACKAGE(GLEW QUIET)
FIND_PACKAGE(Boost QUIET)

#IF(MSVC)
#      SET(Boost_USE_STATIC_LIBS ON)
#      SET(Boost_USE_STATIC_RUNTIME ON)
#      ADD_DEFINITIONS(-DFREEGLUT_STATIC)
#We statically link to reduce dependancies
#   FOREACH(flag_var
#        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
#        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
#      IF(${flag_var} MATCHES "/MD")
#         string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
#      ENDIF(${flag_var} MATCHES "/MD")
#   ENDFOREACH(flag_var)
#ENDIF(MSVC)

IF(FREEGLUT_FOUND AND CUDA_FOUND AND GLEW_FOUND AND Boost_FOUND)

  CUDA_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

  SET(CUDA_NVCC_FLAGS "-O3")
  INCLUDE_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/common/inc )
  LINK_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/lib )
  LINK_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/common/lib )

  IF(WIN32)
        SET(CUDA_NVCC_FLAGS "-arch=sm_11;--verbose" )
     ELSE(WIN32)
        SET(CUDA_NVCC_FLAGS "-O3;-arch=sm_11;--compiler-bindir=/opt/gcc44;--verbose" )
  ENDIF(WIN32)
  ADD_DEFINITIONS(-DCUDA_BUILD)

  #LINK_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/lib )
  LINK_DIRECTORIES( ${Boost_LIBRARY_DIRS} )
  INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIRS} ${GLEW_INCLUDE_DIR})

  IF(CUDA_SDK_ROOT_DIR)
    ADD_DEFINITIONS(-DUSE_CUTIL)
    INCLUDE_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/common/inc )
    LINK_DIRECTORIES( ${CUDA_SDK_ROOT_DIR}/lib )

    IF(WIN32)
       LINK_LIBRARIES(${CUDA_SDK_ROOT_DIR}/common/lib/x64/cutil64.lib)
    ELSE(WIN32)
       LINK_LIBRARIES(libcutil_x86_64.a)
    ENDIF(WIN32)

  ENDIF()

  CUDA_ADD_EXECUTABLE(
    VBODisplay
    main.cpp kernal.cu
  )

  TARGET_LINK_LIBRARIES(
    VBODisplay
    ${LIBRARY_NAME}
  )

ENDIF(FREEGLUT_FOUND AND CUDA_FOUND AND GLEW_FOUND AND Boost_FOUND)
